using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;
using Microsoft.CodeAnalysis.Text;
using PX.Generators.Common;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace PX.Generators.DacGenerators.BqlFieldsGeneration
{
    [Obsolete("Doesn't support everything")]
    internal class BqlFieldsRoslynCodeGenerator : ICodeGenerator<BqlTableInfo>
    {
        public static readonly string Indentation = "\t";
        public static BqlFieldsRoslynCodeGenerator Instance { get; } = new();

        public CodeGenerationResult GenerateCode(BqlTableInfo bqlTable,
                                                                   CancellationToken cancellationToken)
        {
            if (bqlTable.Fields?.Count is not > 0)
            {
                Debugger.Break();
                return default;
            }

            cancellationToken.ThrowIfCancellationRequested();

            var compilation = CompilationUnit()
                .AddMembers(GetNamespaceOrClass()
                                .WithLeadingTrivia(GetComment()));

            cancellationToken.ThrowIfCancellationRequested();

            compilation = compilation.NormalizeWhitespace(Indentation);

            return new (
                $"{bqlTable.FullName}.bqlfields.g.cs",
                SourceText.From(compilation.ToFullString(), Encoding.UTF8)
            );

            SyntaxTrivia GetComment()
            {
                return Comment("// <auto-generated/>");
            }

            MemberDeclarationSyntax GetNamespaceOrClass()
            {
                if (string.IsNullOrEmpty(bqlTable.Namespace))
                    return GetClass();

                return NamespaceDeclaration(
                    name: ParseName(bqlTable.Namespace!),
                    externs: default,
                    usings: default,
                    members: SingletonList<MemberDeclarationSyntax>(GetClass())
                );
            }

            ClassDeclarationSyntax GetClass()
            {
                return ClassDeclaration(
                    attributeLists: default,
                    modifiers: TokenList(Token(SyntaxKind.PartialKeyword)),
                    identifier: Identifier(bqlTable.Name),
                    typeParameterList: default,
                    baseList: default,
                    constraintClauses: default,
                    members: List(GetBqlFieldsClasses())
                );
            }

            IEnumerable<MemberDeclarationSyntax> GetBqlFieldsClasses()
            {
                foreach (BqlFieldInfo field in bqlTable.Fields!)
                {
                    if (field.ClassType == null)
                        continue;

                    yield return ClassDeclaration(
                        attributeLists: List<AttributeListSyntax>(),
                        modifiers: TokenList(GetTokens()),
                        identifier: Identifier(field.ClassName),
                        typeParameterList: default,
                        baseList: BaseList(
                            SingletonSeparatedList<BaseTypeSyntax>(
                                SimpleBaseType(
                                    ParseTypeName($"PX.Data.BQL.{field.ClassType}.Field<{field.ClassName}>")))),
                        constraintClauses: default,
                        members: default
                    );

                    IEnumerable<SyntaxToken> GetTokens()
                    {
                        yield return Token(SyntaxKind.PublicKeyword);
                        if (field.IsHidingBaseClass)
                            yield return Token(SyntaxKind.NewKeyword);
                        yield return Token(SyntaxKind.AbstractKeyword);
                    }
                }
            }
        }
    }
}