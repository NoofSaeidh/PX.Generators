using Microsoft.CodeAnalysis.Text;
using PX.Generators.Common;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace PX.Generators.DacGenerators.BqlFieldsGeneration
{
    // not threadsafe
    internal class BqlFieldsSimpleCodeGenerator : ICodeGenerator<BqlTableInfo>
    {
        // todo: configurable
        public static readonly string Indentation = "\t";
        public static readonly Encoding Encoding = Encoding.UTF8;
        public static BqlFieldsSimpleCodeGenerator Instance { get; } = new();

        private readonly StringCodeBuilder _builder = new(Indentation);

        public CodeGenerationResult GenerateCode(BqlTableInfo input, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();

            if (input.Fields?.Count is not > 0)
            {
                return CodeGenerationResult.Unsuccessful;
            }

            _builder.Clear();
            _builder.Add("// <auto-generated/>");

            using (GetNamespace())
            {
                _builder.StartLine("partial class ").Add(input.Name);
                using (_builder.CodeBlock())
                {
                    foreach (var field in input.Fields)
                    {
                        cancellationToken.ThrowIfCancellationRequested();

                        if (string.IsNullOrEmpty(field.ClassName) || string.IsNullOrEmpty(field.ClassType))
                            continue;

                        _builder.StartLine().Add("public ").ConditionalAdd(field.IsHidingBaseClass, "new ")
                                .Add("abstract class ").Add(field.ClassName!).Add(" : PX.Data.BQL.").Add(field.ClassType!)
                                .Add(".Field<").Add(field.ClassName!).Add("> { }");
                    }
                }
            }

            _builder.EmptyLine();

            var result = _builder.ToString();
            _builder.Clear();

            return new(
                $"{input.FullName}.bqlfields.g.cs",
                SourceText.From(result, Encoding)
            );

            IDisposable GetNamespace()
            {
                if (string.IsNullOrEmpty(input.Namespace))
                {
                    return Disposable.Empty;
                }

                _builder.StartLine("namespace ").Add(input.Namespace!);
                return _builder.CodeBlock(onNewLine: true);
            }
        }
    }
}